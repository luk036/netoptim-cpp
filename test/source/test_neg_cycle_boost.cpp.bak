// -*- coding: utf-8 -*-
#include <doctest/doctest.h>  // for ResultBuilder

#include <boost/graph/adjacency_list.hpp>                 // for adjacency_list
#include <boost/graph/detail/adj_list_edge_iterator.hpp>  // for adj_list_ed...
#include <boost/graph/detail/adjacency_list.hpp>          // for get, vertices
#include <boost/graph/graph_selectors.hpp>                // for directedS
#include <boost/graph/graph_traits.hpp>                   // for graph_traits
#include <boost/graph/properties.hpp>                     // for edge_weight_t
#include <boost/iterator/iterator_facade.hpp>             // for operator!=
#include <boost/move/utility_core.hpp>                    // for move
#include <boost/pending/property.hpp>                     // for property
#include <iterator>                                       // for begin
#include <list>                                           // for operator==
#include <netoptim/neg_cycle.hpp>                         // for negCycleFinder
#include <py2cpp/nx2bgl.hpp>                              // for GraphAdaptor
#include <type_traits>                                    // for move
#include <utility>                                        // for pair
#include <vector>                                         // for vector

using graph_t = boost::adjacency_list<
    boost::listS, boost::vecS, boost::directedS, boost::no_property,
    boost::property<boost::edge_weight_t, int, boost::property<boost::edge_index_t, int>>>;
using Vertex = boost::graph_traits<graph_t>::vertex_descriptor;
// using Edge_it = boost::graph_traits<graph_t>::edge_iterator;

static py::GraphAdaptor<graph_t> create_test_case1() {
    using edge_t = std::pair<int, int>;
    const auto num_nodes = 5;
    enum nodes { A, B, C, D, E };
    static edge_t edge_array[] = {edge_t{A, B}, edge_t{B, C}, edge_t{C, D}, edge_t{D, E}, edge_t{E, A}};
    int weights[] = {-5, 1, 1, 1, 1};
    int num_arcs = sizeof(edge_array) / sizeof(edge_t);
    auto g = graph_t(edge_array, edge_array + num_arcs, weights, num_nodes);
    return py::GraphAdaptor<graph_t>{std::move(g)};
}

static py::GraphAdaptor<graph_t> create_test_case2() {
    using edge_t = std::pair<int, int>;
    const auto num_nodes = 5;
    enum nodes { A, B, C, D, E };
    static edge_t edge_array[] = {edge_t{A, B}, edge_t{B, C}, edge_t{C, D}, edge_t{D, E}, edge_t{E, A}};
    int weights[] = {2, 1, 1, 1, 1};
    int num_arcs = sizeof(edge_array) / sizeof(edge_t);
    auto g = graph_t(edge_array, edge_array + num_arcs, weights, num_nodes);
    return py::GraphAdaptor<graph_t>{std::move(g)};
}

static auto create_test_case_timing() -> py::GraphAdaptor<graph_t> {
    using edge_t = std::pair<int, int>;
    constexpr auto num_nodes = 3;
    enum nodes { A, B, C };
    static edge_t edge_array[] = {edge_t{A, B}, edge_t{B, A}, edge_t{B, C}, edge_t{C, B},
                                edge_t{B, C}, edge_t{C, B}, edge_t{C, A}, edge_t{A, C}};
    int weights[] = {7, 0, 3, 1, 6, 4, 2, 5};
    constexpr int num_arcs = sizeof(edge_array) / sizeof(edge_t);
    auto g = graph_t(edge_array, edge_array + num_arcs, weights, num_nodes);
    return py::GraphAdaptor<graph_t>{std::move(g)};
}

static auto create_test_case_timing2() -> py::GraphAdaptor<graph_t> {
    using edge_t = std::pair<int, int>;
    constexpr auto num_nodes = 3;
    enum nodes { A, B, C };
    static edge_t edge_array[] = {edge_t{A, B}, edge_t{B, A}, edge_t{B, C}, edge_t{C, B},
                                edge_t{B, C}, edge_t{C, B}, edge_t{C, A}, edge_t{A, C}};
    int weights[] = {3, -4, -1, -3, 2, 0, -2, 1};
    constexpr int num_arcs = sizeof(edge_array) / sizeof(edge_t);
    auto g = graph_t(edge_array, edge_array + num_arcs, weights, num_nodes);
    return py::GraphAdaptor<graph_t>{std::move(g)};
}

auto do_case(const py::GraphAdaptor<graph_t>& gra) -> bool {
    using edge_t = decltype(*(std::begin(gra.edges())));

    const auto get_weight = [&](const edge_t& edge) -> int {
        const auto& weightmap = boost::get(boost::edge_weight, gra);
        return weightmap[edge];
    };

    auto dist = std::vector<int>(gra.number_of_nodes(), 0);
    auto N = negCycleFinder<py::GraphAdaptor<graph_t>>{gra};
    const auto cycle = N.find_neg_cycle(dist, get_weight);
    return !cycle.empty();
}

auto do_case_float(const py::GraphAdaptor<graph_t>& gra) -> bool {
    using edge_t = decltype(*(std::begin(gra.edges())));

    const auto get_weight = [&](const edge_t& edge) -> double {
        const auto& weightmap = boost::get(boost::edge_weight, gra);
        return weightmap[edge];
    };

    auto dist = std::vector<double>(gra.number_of_nodes(), 0.0);
    auto N = negCycleFinder<py::GraphAdaptor<graph_t>>{gra};
    const auto cycle = N.find_neg_cycle(dist, get_weight);
    return !cycle.empty();
}

TEST_CASE("Test Negative Cycle (boost)") {
    const auto gra = create_test_case1();
    const auto hasNeg = do_case(gra);
    CHECK(hasNeg);
}

TEST_CASE("Test No Negative Cycle (boost)") {
    const auto gra = create_test_case2();
    const auto hasNeg = do_case(gra);
    CHECK(!hasNeg);
}

TEST_CASE("Test Timing Graph (boost)") {
    const auto gra = create_test_case_timing();
    const auto hasNeg = do_case(gra);
    CHECK(!hasNeg);
}

TEST_CASE("Test Timing Graph 2 (boost)") {
    const auto gra = create_test_case_timing2();
    const auto hasNeg = do_case(gra);
    CHECK(hasNeg);
}

TEST_CASE("Test Timing Graph float (boost)") {
    const auto gra = create_test_case_timing();
    const auto hasNeg = do_case_float(gra);
    CHECK(!hasNeg);
}

TEST_CASE("Test Timing Graph 2 (boost)") {
    const auto gra = create_test_case_timing2();
    const auto hasNeg = do_case_float(gra);
    CHECK(hasNeg);
}
